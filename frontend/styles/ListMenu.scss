@use "palette.scss";

/* Each list should have a describing header with this class */
.listMenuHeader {
    width: 100%;
    padding: 10px 0;

    font-weight: bold;
}

/* The actual list is contained within a ul with this class  */
.listMenu {
    display: flex;
    flex-direction: column;

    width: 100%;
    margin: 0;

    /* This list and underlying lists */
    &, ul {
        list-style: none;
        padding: 0;
    }
}

/* All inner elements of listItems */
.listItemButton {
    padding-left: 5px;
}

/* All interactable items in a .listMenu */
.listItemCollapsable, .listItemAction {
    & .listItemButton {
        width: 100%;

        @include palette.interactable;
    }
}

.listItemRoot, .listItemChild, .listItemSubroot {
    display: flex;

    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;

    &.selected .listItemButton {
        text-decoration: underline;
        font-weight: bold;
    }


    /* Creating the lines in the list */
    li li li &::before {
        content: "│  ├─";
    }

    li li li:last-child &::before {
        content: "│  └─";
    }

    li li:last-child li &::before {
        content: "   ├─";
    }

    li li:last-child li:last-child &::before {
        content: "   └─";
    }

    li li &::before {
        content: "├─";
    }

    li li:last-child &::before {
        content: "└─";
    }

    li &::before {
        @include palette.list-lines;

        flex-shrink: 0;

        white-space: pre;
        line-height: 1;
        letter-spacing: -1px;
        font-size: 1.4em;

        overflow-y: hidden;
    }
}


/* When a ListItem is collapsed */
.listItemCollapsable {

    .listItemButton {
    position: relative;
    padding-right: 1.2em;

        &::after {
            position: absolute;
            right: .5em;

            content: "-";

            font-weight: normal;
        }
    }

    &.collapsed .listItemButton {
        &::after {
            content: "+";
        }
    }

    // If in a popup, prevent the collapseable icon to appear
    .popup & .listItemButton::after {
        content: "" !important;
    }
}

.listItemCollapsable+* {
    display: flex;
    flex-direction: column;
    align-items: stretch;

    overflow: hidden;

    width: 100%;
}

.listItemCollapsable.collapsed+* {
    display: none;
}



/* Button to add to list */
.listAddButton {
    margin: 1rem auto 0;
    width: 10rem;
}

/* When input is empty/invalid while changing a ListItem's text */
.listItemInputInvalid {
    border: 2px solid red;
}

/*
 * Icon/tags
 *
 * .tag is the container for all tags
 * Beneath it there's an individual div for each tag the listItem
 * contains with the corresponding class below.
 */

.tag {
    float: right;
}

.analysisOngoing::after {
    content: "[P]"
}

.analysisUnstarted::after {
    content: "[E]"
}

.analysisFinished::after {
    content: "[K]"
}

.analysisFailed::after {
    content: "[M]"
}

.soundchainAnalysed::after {
    content: "[A]"
}

.soundchainRejected::after {
    content: "[R]"
}

.fileReceived::after {
    content: "[M]"
}

.analysisSucceeded::after {
    content: "[S]"
}

.soundfileProcessed::after {
    content: "[P]"
}

.soundfileRejected::after {
    content: "[R]"
}
